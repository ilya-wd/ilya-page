// MAIN STYLES
body {
  background: rgb(237, 237, 237);
  margin: 0; 
}

.main-body {
  max-width: 40vw;
  margin: 0 auto;
}

@media screen and (max-width: 1200px) {
  .main-body {
      padding: 100px;
      max-width: none;
  }
}

@media screen and (max-width: 768px) {
  .main-body {
      padding: 20px;
      max-width: none;
  }
}

.container {
  max-width: 100%;
  padding: 0 1rem; 
}

.grid-container {
  display: grid;
  grid-template-columns: 1fr 3fr; 
  gap: 1rem;
}

.table-of-contents-column {
  border-right: 5px solid #cdcccc; 

}

.table-of-contents a {
  text-decoration: underline; 
}

.table-of-contents li {
  margin-bottom: 0.5rem;
  margin-top: 0.5rem;
}

.table-of-contents a:hover {
  color: rgb(163, 31, 162);
}

.table-of-contents {
  position: sticky;
  padding: 1rem;
  top: 100px; 
  overflow-y: auto;
  max-height: calc(100vh - 100px);
}

.blog-content {
  padding: 1rem;
  color: #333;
  font-family: 'Arial', sans-serif;
  line-height: 1.6; 
}

.blog-content code {
  white-space: pre-wrap; 
  word-wrap: break-word; 
  overflow-wrap: break-word; 
}

.blog-content h1, .blog-content h2, .blog-content h3, .blog-content h4, .blog-content h5, .blog-content h6 {
  margin-top: 1em;
  margin-bottom: 0.5em;
  color: #222;
  font-weight: 700;
  font-size: 2em;
}

.blog-content p {
  margin-bottom: 1em; 
}

details summary {
  font-weight: 600;
  font-size: 1.2em;
  margin-bottom: 1em;
  cursor: pointer;
}

details p{
  background-color: rgb(255, 208, 215);
  padding: 1rem;
}

@media screen and (max-width: 768px) {
  .grid-container {
      grid-template-columns: 1fr; 
      display: block;
  }

  .table-of-contents {
      position: static;
      max-height: auto;
      order: -1; 
      border: none;
      width: 100%;
  } 
}




// FLOATING SQUARES

$square-count: 10;
$sway-type: "sway-left-to-right", "sway-right-to-left";
$colors: #51eaea, #fffde1, #ff9d76, #FB3569;
$rotation-direction: "rotate-left", "rotate-right";
$sway-amounts: 100%, -100%;

@function random_range($min, $max) {
  $rand: random();
  $random_range: $min + floor($rand * (($max - $min) + 1));
  @return $random_range;
}

@function sample($list) {
  @return nth($list, random(length($list)));
}

@for $i from 1 through length($colors) {
  @keyframes change-border-color-#{$i} {
    0% { border-color: nth($colors, $i); }
    25% { border-color: nth($colors, if($i + 1 > length($colors), 1, $i + 1)); }
    50% { border-color: nth($colors, if($i + 2 > length($colors), $i + 2 - length($colors), $i + 2)); }
    75% { border-color: nth($colors, if($i + 3 > length($colors), $i + 3 - length($colors), $i + 3)); }
    100% { border-color: nth($colors, $i); }
  }
}

.squares {
  position: relative;
  width: 100%;
  height: 30vh;
}

.square {
  position: absolute;
  z-index: -1;
  left: var(--square-left-offset);
  bottom: -75%;
  display: block;
  width: var(--square-height);
  height: var(--square-height);
  animation: float-up var(--square-float-duration) var(--square-float-delay) ease-in infinite;

  &::before {
    position: absolute;
    content: '';
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: solid 7px;
    animation: var(--square-sway-rotate-keyframe) 60s ease-in infinite, var(--square-border-color-keyframe) 10s linear infinite;
  }

  @for $i from 0 through $square-count {
    $sway-direction: sample($sway-type);
    $rotation-degree: if(sample($rotation-direction) == 'rotate-right', 360deg, -360deg);

    $color-transition: sample(1 through length($colors));

    &:nth-child(#{$i}) {
      --square-left-offset: #{random_range(0vw, 90vw)};
      --square-height: #{random_range(3vw, 15vw)};
      --square-float-duration: #{random_range(20s, 20s)};
      --square-float-delay: #{random_range(0s, 20s)};
      --square-sway-rotate-keyframe: sway-rotate-#{$i};
      // --square-sway-duration: #{random_range(0s, 4s)};
      --sway-direction: #{$sway-direction};
      --rotation-direction: #{$rotation-direction};
      --square-border-color-keyframe: change-border-color-#{random_range(1, length($colors))};

      @keyframes sway-rotate-#{$i} {
        0%, 100% {
          transform: translateX(0) rotate(0deg);
        }
        50% {
          transform: translateX(if($sway-direction == 'sway-left-to-right', 50%, -50%)) rotate($rotation-degree);
        }
      }

    }
  }
}


@keyframes exp-sway-rotate {
  from {
    transform: translateX(if(--sway-direction == 'sway-left-to-right', 100%, -100%)) rotate(0deg);
  }

  to {
    transform: translateX(if(--sway-direction == 'sway-left-to-right', 100%, -100%)) rotate(if(--rotation-direction == 'rotate-right', 360deg, -360deg));
  }
}

@keyframes float-up {
  to {
    transform: translateY(-300vh);
  }
}

.wave {
  animation: wave-animation 10s linear infinite;  
  display: inline-block;
  animation-delay: 3s;
}

@keyframes wave-animation {
   0% { transform: rotate( 0.0deg) }
   5% { transform: rotate(14.0deg) }  
   10% { transform: rotate(-8.0deg) }
   15% { transform: rotate(14.0deg) }
   20% { transform: rotate(-4.0deg) }
   25% { transform: rotate(10.0deg) }
   30% { transform: rotate( 0.0deg) }  
   100% { transform: rotate( 0.0deg) }
}
